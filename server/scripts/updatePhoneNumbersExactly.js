const fs = require('fs');
const path = require('path');

// CSV data mapping - phone numbers exactly as in CSV but without spaces
const csvData = [
  { name: "ÿ•ÿ®ÿ±ÿßŸáŸäŸÖ ÿ≠ŸÖÿØŸä", phone: "201092938667" },
  { name: "ÿπŸÖÿ±Ÿà ÿ≤ÿßŸáÿ±", phone: "201069033223" },
  { name: "ŸÖÿßŸáŸäÿ™ÿßÿ® ŸÖÿµÿ∑ŸÅŸâ", phone: "201007789469" },
  { name: "ÿ£ŸÖŸäÿ±ÿ© ÿ¥ÿ±ŸÅ", phone: "201016171132" },
  { name: "ÿßÿ≥ŸÖÿßÿ° ŸÉÿ≠ŸäŸÑ", phone: "201020193765" }, // CSV: 20102 0193765
  { name: "ÿßÿ®ÿ±ÿßŸáŸäŸÖ ÿ£ÿ≠ŸÖÿØ", phone: "201016224104" },
  { name: "ŸÜŸàÿ±ŸáÿßŸÜ ÿπÿßÿØŸÑ", phone: "201017878976" },
  { name: "ÿ£ÿ≥ŸÖÿßÿ° ÿ±ŸÅÿπÿ™", phone: "201123663726" },
  { name: "ÿπÿßÿØŸÑ ŸÖÿ≠ŸÖÿØ", phone: "201101572707" },
  { name: "ÿπŸÖÿ±Ÿà ÿµŸÑÿßÿ≠", phone: "201091073666" }, // CSV: 20109 107 3666
  { name: "ÿπŸÑŸä ÿ™ŸàŸÅŸäŸÇ", phone: "201012306778" },
  { name: "ŸÖÿ≠ŸÖŸàÿØ ÿßŸÑÿ≥ŸäÿØ", phone: "201150423493" },
  { name: "ÿßŸäŸÖÿßŸÜ ŸÖÿ≠ŸÖÿØ", phone: "201063076840" },
  { name: "ÿßŸÑÿ≤Ÿáÿ±ÿßÿ° ÿπÿµÿßŸÖ", phone: "201021959341" },
  { name: "ÿ∂ÿ≠Ÿä ÿ≥ÿπÿØ ÿßŸÑÿØŸäŸÜ", phone: "201013527189" },
  { name: "ÿ≤ŸäŸÜÿ® ÿπÿßÿ∑ŸÅ", phone: "201102103767" }, // CSV: 20110 210 3767
  { name: "Ÿáÿßÿ¨ÿ± ŸÖŸÜÿµŸàÿ±", phone: "201026123577" },
  { name: "ŸáŸÖÿßŸÖ ÿ≠ÿ≥ÿßŸÖ", phone: "201093695877" },
  { name: "ŸÖŸÜÿßÿ± ÿπŸÖÿ±Ÿà", phone: "201015673562" },
  { name: "ÿ±ÿ≠ÿßÿ® ÿπÿßÿØŸÑ", phone: "201140989001" },
  { name: "ÿ£ŸÖŸäÿ±ÿ© ŸÜÿßÿ¨Ÿä", phone: "201118225638" },
  { name: "Ÿáÿ®ÿ© ÿ≠ÿ±ÿ®Ÿä", phone: "201016219707" },
  { name: "ÿßŸäÿßÿ™ ŸÅŸàÿ≤Ÿä", phone: "201113371847" },
  { name: "ÿ≥ÿßÿ±ÿ© ÿπŸÑŸä", phone: "201023778899" },
  { name: "ŸÖÿ≠ŸÖŸàÿØ ÿßŸÑÿµÿ®ÿßÿ≠Ÿä", phone: "201000199325" },
  { name: "ÿ≠ŸÜŸäŸÜ", phone: "201019550168" },
  { name: "ŸÅÿßÿ∑ŸÖÿ© ÿπÿ®ÿØ ÿßŸÑŸàÿØŸàÿØ", phone: "201146513433" },
  { name: "ÿµÿßÿ®ÿ±ŸäŸÜ ÿπŸäÿ≥Ÿâ", phone: "" }, // No phone in CSV
  { name: "ÿ≥ÿ≠ÿ± ŸÜÿßÿ¨Ÿä", phone: "201157507968" },
  { name: "ÿ¥ŸäŸÖÿßÿ° ÿ≠ÿ≥ŸÜ", phone: "201206455159" },
  { name: "ŸÖÿ≠ŸÖÿØ ÿπÿµÿßŸÖ", phone: "201143136065" }
];

function updatePhoneNumbers() {
  const teachersPath = path.join(__dirname, '../data/teachers.json');
  
  try {
    // Read current teachers data
    const teachers = JSON.parse(fs.readFileSync(teachersPath, 'utf8'));
    
    let updatedCount = 0;
    
    // Update phone numbers
    csvData.forEach(csvRecord => {
      const teacher = teachers.find(t => t.name.trim() === csvRecord.name.trim());
      
      if (teacher) {
        const oldPhone = teacher.phone;
        
        // Set phone exactly as in CSV (without spaces)
        if (csvRecord.phone) {
          teacher.phone = csvRecord.phone;
        }
        
        if (oldPhone !== teacher.phone) {
          console.log(`‚úÖ Updated ${teacher.name}:`);
          console.log(`   Phone: ${oldPhone} ‚Üí ${teacher.phone}`);
          updatedCount++;
        }
      }
    });
    
    // Save updated data
    fs.writeFileSync(teachersPath, JSON.stringify(teachers, null, 2));
    
    console.log(`\nüìä Total phone numbers updated: ${updatedCount}`);
    
  } catch (error) {
    console.error('‚ùå Error updating phone numbers:', error);
    process.exit(1);
  }
}

// Run the update
updatePhoneNumbers();